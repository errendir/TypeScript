=== tests/cases/compiler/mappedTypeRecursiveInference.ts ===
interface A { a: A }
>A : Symbol(A, Decl(mappedTypeRecursiveInference.ts, 0, 0))
>a : Symbol(A.a, Decl(mappedTypeRecursiveInference.ts, 0, 13))
>A : Symbol(A, Decl(mappedTypeRecursiveInference.ts, 0, 0))

declare let a: A;
>a : Symbol(a, Decl(mappedTypeRecursiveInference.ts, 1, 11))
>A : Symbol(A, Decl(mappedTypeRecursiveInference.ts, 0, 0))

type Deep<T> = { [K in keyof T]: Deep<T[K]> }
>Deep : Symbol(Deep, Decl(mappedTypeRecursiveInference.ts, 1, 17))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 2, 10))
>K : Symbol(K, Decl(mappedTypeRecursiveInference.ts, 2, 18))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 2, 10))
>Deep : Symbol(Deep, Decl(mappedTypeRecursiveInference.ts, 1, 17))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 2, 10))
>K : Symbol(K, Decl(mappedTypeRecursiveInference.ts, 2, 18))

declare function foo<T>(deep: Deep<T>): T;
>foo : Symbol(foo, Decl(mappedTypeRecursiveInference.ts, 2, 45))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 3, 21))
>deep : Symbol(deep, Decl(mappedTypeRecursiveInference.ts, 3, 24))
>Deep : Symbol(Deep, Decl(mappedTypeRecursiveInference.ts, 1, 17))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 3, 21))
>T : Symbol(T, Decl(mappedTypeRecursiveInference.ts, 3, 21))

const out = foo(a);
>out : Symbol(out, Decl(mappedTypeRecursiveInference.ts, 4, 5))
>foo : Symbol(foo, Decl(mappedTypeRecursiveInference.ts, 2, 45))
>a : Symbol(a, Decl(mappedTypeRecursiveInference.ts, 1, 11))

